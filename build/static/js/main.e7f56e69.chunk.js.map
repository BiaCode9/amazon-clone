{"version":3,"sources":["firebase.js","StateProvider.js","Home.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Home","state","action","console","log","type","basket","item","index","findIndex","basketItem","id","newBasket","splice","warn","user","App","dispatch","useEffect","onAuthStateChanged","authUser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sbAiBMA,GAJcC,IAASC,cAXN,CACrBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKMC,YAEVV,IAASD,QCdTY,G,kBAAeC,2BAGfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OAC3B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAC/CC,IAKQI,EAAgB,kBAAMC,qBAAWV,I,yCC6D/BW,I,gBCVAR,EA7CC,SAACS,EAAOC,GAEtB,OADAC,QAAQC,IAAIF,GACJA,EAAOG,MACb,IAAK,gBACH,OAAO,2BACFJ,GADL,IAGEK,OAAO,GAAD,mBAAML,EAAMK,QAAZ,CAAoBJ,EAAOK,SAGrC,IAAK,qBACH,IAAMC,EAAQP,EAAMK,OAAOG,WACzB,SAACC,GAAD,OAAgBA,EAAWC,KAAOT,EAAOS,MAGvCC,EAAS,YAAOX,EAAMK,QAc1B,OAZIE,GAAS,EAIXI,EAAUC,OAAOL,EAAO,GAGxBL,QAAQW,KAAR,mCAC8BZ,EAAOS,GADrC,4BAKK,2BACFV,GADL,IAEEK,OAAQM,IAGZ,IAAK,WACH,OAAO,2BACFX,GADL,IAEEc,KAAMb,EAAOa,OAGjB,QACE,OAAOd,I,YCFEe,MAhDf,WAAgB,IAAD,EACUlB,IADV,yCACFmB,EADE,KAGbC,qBAAU,WAGRzC,EAAK0C,oBAAmB,SAAAC,GACtBjB,QAAQC,IAAI,mBAAoBgB,GAI9BH,EAFEG,EAEO,CACPf,KAAM,WACNU,KAAMK,GAKC,CACPf,KAAM,WACNU,KAAM,YAIX,KCtBeM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAenC,aHXS,CAC1Ba,OAAQ,GACRS,KAAM,MGSuCvB,QACxCA,GACD,kBAAC,EAAD,QAGJqC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.e7f56e69.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDUBMvkxFSVX3UyEzR6cwEqzkjyHBsnQUA\",\n  authDomain: \"clone-79dcf.firebaseapp.com\",\n  databaseURL: \"https://clone-79dcf.firebaseio.com\",\n  projectId: \"clone-79dcf\",\n  storageBucket: \"clone-79dcf.appspot.com\",\n  messagingSenderId: \"171551441954\",\n  appId: \"1:171551441954:web:4c401be0d41c334e65b67b\",\n  measurementId: \"G-3P00NMM2JS\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nconst auth = firebase.auth();\n\nexport { db, auth };","import React, { createContext, useContext, useReducer } from \"react\";\n\n// Prepares the dataLayer\nexport const StateContext = createContext();\n\n// Wrap our app and provide the Data Layer\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\n// Pull information from the data layer\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport \"./Home.css\";\nimport Product from \"./Product\";\n\nfunction Home() {\n  return (\n\n    \n\n\n    <div className=\"home\">\n      <div className=\"home__container\">\n        <img\n          className=\"home__image\"\n          src=\"https://images-eu.ssl-images-amazon.com/images/G/02/digital/video/merch2016/Hero/Covid19/Generic/GWBleedingHero_ENG_COVIDUPDATE__XSite_1500x600_PV_en-GB._CB428684220_.jpg\"\n          alt=\"amazon__home__banner\"\n        />\n        <div className=\"home__row\">\n          <Product\n            id=\"12321341\"\n            title=\"Beats Studio3 Wireless Noise Cancelling On-Ear Headphones - Apple W1\n          Headphone Chip, Class 1 Bluetooth, Active Noise Cancelling, 22 Hours\n          Of Listening Time - Midnight Black\"\n            price={349.99}\n            image=\"https://images-na.ssl-images-amazon.com/images/I/71ka5tG2vTL._AC_SX679_.jpg\"\n            rating={5}\n          />\n          <Product\n            id=\"49538094\"\n            title=\"SH 2.6M x 3M/8.5ft x 10ft Background Support System and 4 x 85W 5500K Bulbs, Umbrellas Softbox Continuous Lighting Kit for Photo Studio Product,Portrait and Video Shoot Photography\"\n            price={132.99}\n            image=\"https://images-na.ssl-images-amazon.com/images/I/71C2rDyOhIL._SX679_.jpg\"\n            rating={4}\n          />\n        </div>\n        <div className=\"home__row\">\n          <Product\n          id=\"4903850\"\n          title=\"Fahrenheit 451 Paperback – January 10, 2012\"\n          price={8.29}\n          image=\"https://images-na.ssl-images-amazon.com/images/I/41qI9quGIdL._SX324_BO1,204,203,200_.jpg\"\n          rating={4}\n          \n          />\n          <Product\n          id=\"23445930\"\n          title=\"1984 (Signet Classics) (Cover may vary) Mass Market Paperback – Unabridged, January 1, 1961\"\n          price={6.86}\n          image=\"https://images-na.ssl-images-amazon.com/images/I/41h5dDUzJhL._SX277_BO1,204,203,200_.jpg\"\n          rating={4}\n          />\n          <Product\n          id=\"3254354345\"\n          title=\"Rollerblade Microblade Adjustable Fitness Inline Skate, Black and Red,Performance Inline Skates\"\n          price={109.99}\n          image=\"https://images-na.ssl-images-amazon.com/images/I/91uPu-GtJVL._AC_SX425_.jpg\"\n          rating={4}\n          />\n        </div>\n        <div className=\"home__row\">\n          <Product\n            id=\"90829332\"\n            title=\"Pioneer DJ DJ System (XDJ-RX2)\"\n            price={1699.99}\n            image=\"https://images-na.ssl-images-amazon.com/images/I/61gXayWowbL._AC_SX425_.jpg\"\n            rating={5}\n          \n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","export const initialState = {\n  basket: [],\n  user: null\n};\n\n// global store for the applicaiton\n// pattern for dispatching actions into the store\n\n// Selector\n// good practice to have the Selector in the reducer\n//reduce is a very important function\n//reduce iterates through the basket and tallys up the total of all of the item prices\n//fancy way of having a for loop and incrementing through it and tallying it up and retur it\n// ? \n\nexport const getBasketTotal = (basket) =>\n  basket?.reduce((amount, item) => item.price + amount, 0);\n\n// action is tryign to remove or add .. so it takes a switch\nconst reducer = (state, action) => {\n  console.log(action);\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      return {\n        ...state,\n        // whatever the basket currently is plus whatever is decided to be added\n        basket: [...state.basket, action.item],\n      };\n    \n    case \"REMOVE_FROM_BASKET\":\n      const index = state.basket.findIndex(\n        (basketItem) => basketItem.id === action.id\n      );\n      //copy of the current basket contents\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        //cutting it only by 1 inside the array\n        //user friendly code for this kind of build\n\n        newBasket.splice(index, 1);\n\n      } else {\n        console.warn(\n          `Cant remove product (id: ${action.id}) as its not in basket!`\n        )\n      }\n\n      return {\n        ...state,\n        basket: newBasket\n      }\n    \n    case \"SET_USER\":\n      return {\n        ...state,\n        user: action.user\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Home from \"./Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Checkout from \"./Checkout\";\nimport Login from \"./Login\";\nimport { auth } from \"./firebase\"\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  const [{}, dispatch] = useStateValue();\n\n  useEffect(() => {\n    // will only run once when the app component loads\n\n    auth.onAuthStateChanged(authUser => {\n      console.log('THE USER IS >>> ', authUser);\n\n      if (authUser) {\n        //the user just logged in or the user was logged in\n        dispatch({\n          type: 'SET_USER',\n          user: authUser\n      })\n\n      } else {\n        //the user is logged out\n        dispatch({\n          type: 'SET_USER',\n          user: null\n      })\n      }\n    })\n  }, [])\n\n  return (\n    // BEM\n    <Router>\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/checkout\">\n            <Header />\n            <Checkout />\n          </Route>\n          <Route path=\"/\">\n            <Header />\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer=\n      {reducer}>\n      <App />\n      </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}